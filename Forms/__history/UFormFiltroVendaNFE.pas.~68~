unit UFormFiltroVendaNFE;

interface

uses
  Winapi.Messages, System.SysUtils, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uFormFiltroPai, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  Vcl.Grids, FireDAC.Comp.Client, Data.DB, FireDAC.Comp.DataSet, Vcl.StdCtrls,
  Vcl.ExtCtrls, Vcl.Menus, ACBrDFeReport, ACBrDFeDANFeReport, ACBrNFeDANFEClass,
  ACBrNFeDANFEFR, ACBrBase, ACBrDFe, ACBrNFe;

type
  TFormFiltroVendaNFE = class(TFormFiltroPai)
    Button2: TButton;
    PopupMenu1: TPopupMenu;
    ImprimirNFE1: TMenuItem;
    ImprimirDANFE1: TMenuItem;
    nfe: TACBrNFe;
    ACBrNFeDANFEFR1: TACBrNFeDANFEFR;
    grid: TStringGrid;
  procedure ListarArquivosNoGrid ;
    procedure Button2Click(Sender: TObject);
    procedure ImprimirNFE1Click(Sender: TObject);
    procedure ImprimirDANFE1Click(Sender: TObject);
    procedure limpaCampos;

  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormFiltroVendaNFE: TFormFiltroVendaNFE;

implementation

uses
  System.Types, System.Variants, Winapi.Windows;

{$R *.dfm}

procedure TFormFiltroVendaNFE.Button2Click(Sender: TObject);
begin
  inherited;
ListarArquivosNoGrid;
end;

procedure TFormFiltroVendaNFE.ImprimirDANFE1Click(Sender: TObject);
  var
  XMLImpressao: string;
begin
  if (Grid.col >= 0) and (grid.row >= 0) then
  begin
    XMLImpressao := grid.Cells[grid.col, grid.row];
      nfe.NotasFiscais.Clear;



  nfe.NotasFiscais.LoadFromFile('C:\MultimacPdv-main\MultimacPdv-main\Schemas\Docs\'+xmlImpressao, FALSE);   // utilizar quando você quer usar o arquivo XML da NFe
  nfe.NotasFiscais[0].Imprimir;
  end
  else
  begin
    ShowMessage('Nenhuma célula selecionada.');
  end;
end;

procedure TFormFiltroVendaNFE.ImprimirNFE1Click(Sender: TObject);
  var
  XMLName: string;
begin
  // Verifica se uma célula foi selecionada
  if (Grid.col >= 0) and (grid.row >= 0) then
  begin
    // Obtém o nome do XML da célula selecionada no StringGrid
    XMLName := grid.Cells[grid.col, grid.row];

    // Exibe o nome do XML em um ShowMessage
    ShowMessage('Nome do XML: ' + XMLName);
  end
  else
  begin
    ShowMessage('Nenhuma célula selecionada.');
  end;
end;

procedure TFormFiltroVendaNFE.limpaCampos;
var
  i, j: Integer;
begin
  // Percorre todas as linhas e colunas do StringGrid
  for i := 0 to Grid.RowCount   do
  begin
    for j := 0 to Grid.ColCount  do
    begin
      // Define o valor da célula como vazio
      Grid.Cells[j, i]:='';
    end;
  end;
end;

procedure TFormFiltroVendaNFE.ListarArquivosNoGrid;
var
  SearchRec: TSearchRec;

begin
  try
        limpaCampos;
    if FindFirst('C:\MultimacPdv-main\MultimacPdv-main\Schemas\Docs\*.xml', faAnyFile, SearchRec) = 0 then
    begin

      // Define larguras das colunas (supondo que "grid" seja o seu StringGrid)
      grid.ColWidths[0] := 1;
      grid.ColWidths[1] := 350; // Adiciona largura para a segunda coluna, que conterá a data de criação
       grid.ColWidths[2] := 200;
      // Define cabeçalhos das colunas
      grid.Cells[0, 0] := 'Num Série';
      grid.Cells[1, 0] := 'Chave XML';
      grid.Cells[2, 0] := 'Data de Geração';

      // Adiciona o primeiro arquivo encontrado
      if (SearchRec.Name <> '.') then
      begin
        grid.Cells[1, grid.RowCount - 4] := SearchRec.Name;
        grid.Cells[2, grid.RowCount - 4] := DateTimeToStr(FileDateToDateTime(SearchRec.Time));
        grid.RowCount := grid.RowCount + 1;
      end;
      while FindNext(SearchRec) = 0 do
      begin

        if (SearchRec.Name <> '..') then
        begin

          grid.Cells[1, grid.RowCount - 4] := SearchRec.Name;

          grid.Cells[2, grid.RowCount - 4] := DateTimeToStr(FileDateToDateTime(SearchRec.Time));
          grid.RowCount := grid.RowCount + 1;
        end;
      end;
    end
    else
    begin
      ShowMessage('Nenhum arquivo XML encontrado no diretório.');
    end;
  finally
    ShowMessage('Listagem completa.');
  end;
end;

end.



